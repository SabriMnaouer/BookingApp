{"ast":null,"code":"import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","map":{"version":3,"sources":["C:/Users/whoami/Desktop/for_my_portfolio/BookingApp/node_modules/date-fns/esm/intervalToDuration/index.js"],"names":["compareAsc","add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","toDate","requiredArgs","intervalToDuration","interval","arguments","start","end","isNaN","getTime","RangeError","duration","years","Math","abs","sign","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"mappings":"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","sourcesContent":["import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}"]},"metadata":{},"sourceType":"module"}